#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ task_05_basic_security.py

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 check_script.py

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞
2. –ë–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
"""

import subprocess
import sys
import os


def check_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ñ–∞–π–ª–∞."""
    file_path = "task_05_basic_security.py"
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ task_05_basic_security.py...")
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        result = subprocess.run([
            sys.executable, "-m", "py_compile", file_path
        ], capture_output=True, text=True, check=False)
        
        if result.returncode == 0:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return True
        else:
            print("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
            print(result.stderr)
            return False
    except FileNotFoundError:
        print("‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False


def check_pep8():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ PEP8 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤."""
    file_path = "task_05_basic_security.py"
    
    print("\nüìè –ü—Ä–æ–≤–µ—Ä–∫–∞ PEP8...")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pycodestyle
    try:
        result = subprocess.run([
            "pycodestyle", file_path
        ], capture_output=True, text=True, check=False)
        
        if result.returncode == 0:
            print("‚úÖ PEP8 —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–æ–±–ª—é–¥–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è  PEP8 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            print(result.stdout)
            print("(–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)")
        return True
        
    except FileNotFoundError:
        print("‚ö†Ô∏è  pycodestyle –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pycodestyle")
        return True


def show_usage_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    print("\n" + "=" * 50)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£:")
    print("=" * 50)
    
    print("\n1. üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞:")
    print("   python3 task_05_basic_security.py")
    
    print("\n2. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
    print("   python3 test_task_05_basic_security.py")
    
    print("\n3. üìñ –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å curl:")
    print("   # –õ–æ–≥–∏–Ω:")
    print('   curl -X POST http://127.0.0.1:5000/login \\')
    print('        -H "Content-Type: application/json" \\')
    print('        -d \'{"username": "user1", "password": "password"}\'')
    
    print("\n   # Basic Auth:")
    print('   curl -u user1:password http://127.0.0.1:5000/basic-protected')
    
    print("\n   # JWT (–∑–∞–º–µ–Ω–∏—Ç–µ TOKEN –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω):")
    print('   curl -H "Authorization: Bearer TOKEN" \\')
    print('        http://127.0.0.1:5000/jwt-protected')
    
    print("\n4. üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞:")
    print("   pycodestyle task_05_basic_security.py")
    
    print("\n5. üì¶ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("   pip install flask flask-httpauth flask-jwt-extended")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîé –ü–†–û–í–ï–†–ö–ê –°–ö–†–ò–ü–¢–ê task_05_basic_security.py")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    syntax_ok = check_syntax()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PEP8
    pep8_ok = check_pep8()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:")
    print(f"   –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {'‚úÖ –û–ö' if syntax_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   PEP8: {'‚úÖ –û–ö' if pep8_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if syntax_ok:
        print("\nüéâ –°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        show_usage_instructions()
    else:
        print("\nüí• –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
    
    print("\n" + "=" * 50)


if __name__ == "__main__":
    main()