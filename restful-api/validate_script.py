#!/usr/bin/env python3
"""
Comprehensive script validation tool.

–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ task_05_basic_security.py –Ω–∞:
- –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
- PEP8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API endpoints
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import subprocess
import sys
import os
import time
import requests
import json


def check_syntax(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–∞."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "py_compile", file_path
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –û–ö")
            return True
        else:
            print("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
            print(result.stderr)
            return False
    except subprocess.TimeoutExpired:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
        return False


def check_pep8(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è PEP8."""
    print("üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ PEP8...")
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–∏–Ω—Ç–µ—Ä–æ–≤
        linters = ["pycodestyle", "p8", "flake8"]
        
        for linter in linters:
            try:
                result = subprocess.run([
                    linter, file_path
                ], capture_output=True, text=True, timeout=15)
                
                if result.returncode == 0:
                    print("‚úÖ PEP8: –û–ö")
                    return True
                else:
                    print(f"‚ö†Ô∏è  PEP8 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({linter}):")
                    print(result.stdout)
                    # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                    return True
            except FileNotFoundError:
                continue
        
        print("‚ö†Ô∏è  –õ–∏–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ PEP8 –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PEP8: {e}")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞


def check_imports(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤."""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        with open(file_path, 'r') as f:
            content = f.read()
        
        required_imports = [
            'Flask', 'jsonify', 'request',
            'HTTPBasicAuth', 'JWTManager',
            'generate_password_hash', 'check_password_hash'
        ]
        
        missing_imports = []
        for imp in required_imports:
            if imp not in content:
                missing_imports.append(imp)
        
        if missing_imports:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–º–ø–æ—Ä—Ç—ã: {', '.join(missing_imports)}")
            return False
        else:
            print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã: –û–ö")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False


def start_flask_server(file_path):
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        process = subprocess.Popen([
            sys.executable, file_path
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if process.poll() is None:
            print("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return process
        else:
            stdout, stderr = process.communicate()
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:")
            print(stderr.decode())
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None


def test_basic_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö endpoints."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö endpoints...")
    base_url = "http://127.0.0.1:5000"
    
    tests = [
        {
            "name": "Login endpoint",
            "url": f"{base_url}/login",
            "method": "POST",
            "data": {"username": "user1", "password": "password"},
            "expected": 200
        },
        {
            "name": "Basic Auth endpoint",
            "url": f"{base_url}/basic-protected",
            "method": "GET",
            "auth": ("user1", "password"),
            "expected": 200
        }
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test["method"] == "POST":
                response = requests.post(
                    test["url"],
                    json=test.get("data"),
                    timeout=5
                )
            else:
                auth = test.get("auth")
                response = requests.get(
                    test["url"],
                    auth=auth,
                    timeout=5
                )
            
            if response.status_code == test["expected"]:
                print(f"‚úÖ {test['name']}: –û–ö")
                passed += 1
            else:
                print(f"‚ùå {test['name']}: –û–∂–∏–¥–∞–ª—Å—è {test['expected']}, "
                      f"–ø–æ–ª—É—á–µ–Ω {response.status_code}")
                
        except requests.RequestException as e:
            print(f"‚ùå {test['name']}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - {e}")
    
    print(f"üìä –¢–µ—Å—Ç—ã: {passed}/{total} –ø—Ä–æ—à–ª–∏")
    return passed == total


def validate_script(file_path):
    """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("=" * 60)
    print(f"üîé –ü–†–û–í–ï–†–ö–ê –°–ö–†–ò–ü–¢–ê: {os.path.basename(file_path)}")
    print("=" * 60)
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    syntax_ok = check_syntax(file_path)
    pep8_ok = check_pep8(file_path)
    imports_ok = check_imports(file_path)
    
    if not syntax_ok or not imports_ok:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        return False
    
    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    server_process = start_flask_server(file_path)
    if server_process:
        try:
            time.sleep(2)  # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            endpoints_ok = test_basic_endpoints()
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            server_process.terminate()
            server_process.wait(timeout=5)
    else:
        endpoints_ok = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {'‚úÖ' if syntax_ok else '‚ùå'}")
    print(f"   PEP8: {'‚úÖ' if pep8_ok else '‚ùå'}")
    print(f"   –ò–º–ø–æ—Ä—Ç—ã: {'‚úÖ' if imports_ok else '‚ùå'}")
    print(f"   –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ' if endpoints_ok else '‚ùå'}")
    
    all_ok = syntax_ok and imports_ok and endpoints_ok
    
    if all_ok:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("\nüí° –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç:")
        print(f"   python3 {os.path.basename(file_path)}")
        print("\nüí° –ö–∞–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API:")
        print("   python3 test_task_05_basic_security.py")
    else:
        print("\nüí• –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
    
    print("=" * 60)
    return all_ok


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 validate_script.py <—Ñ–∞–π–ª_–¥–ª—è_–ø—Ä–æ–≤–µ—Ä–∫–∏>")
        print("–ü—Ä–∏–º–µ—Ä: python3 validate_script.py task_05_basic_security.py")
        sys.exit(1)
    
    file_path = sys.argv[1]
    success = validate_script(file_path)
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()