Testing BaseGeometry class
=========================

This module tests the BaseGeometry class with area and integer_validator methods.

First, import the class:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Basic instantiation:
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

Test area method (should raise exception):
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Test integer_validator with valid integers:
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("height", 1)

Test integer_validator with string:
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

Test integer_validator with zero:
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

Test integer_validator with negative number:
    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ...
    ValueError: distance must be greater than 0

Test integer_validator with float:
    >>> bg.integer_validator("float", 3.14)
    Traceback (most recent call last):
    ...
    TypeError: float must be an integer

Test integer_validator with boolean True:
    >>> bg.integer_validator("bool", True)
    Traceback (most recent call last):
    ...
    TypeError: bool must be an integer

Test integer_validator with boolean False:
    >>> bg.integer_validator("bool", False)
    Traceback (most recent call last):
    ...
    TypeError: bool must be an integer

Test integer_validator with list:
    >>> bg.integer_validator("list", [1, 2, 3])
    Traceback (most recent call last):
    ...
    TypeError: list must be an integer

Test integer_validator with tuple:
    >>> bg.integer_validator("tuple", (1, 2))
    Traceback (most recent call last):
    ...
    TypeError: tuple must be an integer

Test integer_validator with None:
    >>> bg.integer_validator("none", None)
    Traceback (most recent call last):
    ...
    TypeError: none must be an integer

Test integer_validator with dict:
    >>> bg.integer_validator("dict", {})
    Traceback (most recent call last):
    ...
    TypeError: dict must be an integer

Test integer_validator with set:
    >>> bg.integer_validator("set", {1, 2})
    Traceback (most recent call last):
    ...
    TypeError: set must be an integer

Test integer_validator with negative one:
    >>> bg.integer_validator("negative", -1)
    Traceback (most recent call last):
    ...
    ValueError: negative must be greater than 0

Test with very large integer:
    >>> bg.integer_validator("big", 999999999999999999999999999)

Test integer_validator with missing arguments:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test integer_validator with only one argument:
    >>> bg.integer_validator("test")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Test area method with arguments (should still raise exception):
    >>> bg.area(42)
    Traceback (most recent call last):
    ...
    TypeError: area() takes 1 positional argument but 2 were given
